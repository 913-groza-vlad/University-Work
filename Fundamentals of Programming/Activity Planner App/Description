  Create an application to:
  
1. Manage persons and activities. The user can add, remove, update, and list both persons and activities.
2. Add/remove activities. Each activity can be performed together with one or several other persons, who are already in the user’s planner. 
Activities must not overlap (user cannot have more than one activity at a given time).
3. Search for persons or activities. Persons can be searched for using name or phone number. Activities can be searched for using date/time or description. 
The search must work using case-insensitive, partial string matching, and must return all matching items.
4. Create statistics:
    - Activities for a given date. List the activities for a given date, in the order of their start time.
    - Busiest days. This will provide the list of upcoming dates with activities, sorted in ascending order of the free time in that day 
    (all intervals with no activities).
    - Activities with a given person. List all upcoming activities to which a given person will participate.
5. Unlimited undo/redo functionality. Each step will undo/redo the previous operation performed by the user. 
Undo/redo operations must cascade and have a memory-efficient implementation (no superfluous list copying).
6. Implement persistent storage for all entities using file-based repositories. Also implement a `settings.properties` file to configure your application. Observations:
  -You must implement two additional repository sets: one using text files for storage, and one using binary files
  -The program must work the same way using in-memory repositories, text-file repositories and binary file repositories.
  -The decision of which repositories are employed, as well as the location of the repository input files will be made in the program’s `settings.properties` file.
7. Create a Python module that contains an iterable data structure, a sort method and a filter method, together with complete PyUnit unit tests (100% coverage). 
The module must be reusable in other projects.
