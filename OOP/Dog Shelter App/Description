Implementation of a C++ application for a dog shelter, having a graphical user interface designed in Qt.

~Description:
  The “Keep calm and adopt a pet” shelter needs a software application to help them find adoptive parents for the dogs.
they are taking care of. The application can be used in two modes: administrator and user. 
When the application is started, it will offer the option to choose the mode.
 
  Administrator mode: The application will have a database, which holds all the dogs in the shelter at a given moment. 
The shelter employees must be able to update the database, meaning: add a new dog, delete a dog (when the dog is adopted) 
and update the information of a dog. Each Dog has a breed, a name, an age and a photograph. 
The photograph is memorised as a link towards an online resource (the photograph on the presentation site of the centre). 
The administrators will also have the option to see all the dogs in the shelter.

  User mode: A user can access the application and choose one or more dogs to adopt. The application
will allow the user to:
  a. See the dogs in the database, one by one. When the user chooses this option, the data of the
first dog (breed, name, age) is displayed, along with its photograph.
  b. Choose to adopt the dog, in which case the dog is added to the user’s adoption list.
  c. Choose not to adopt the dog and to continue to the next. In this case, the information
corresponding to the next dog is shown and the user is again offered the possibility to adopt it.
This can continue as long as the user wants, as when arriving to the end of the list, if the user
chooses next, the application will again show the first dog.
  d. See all the dogs of a given breed, having an age less than a given number. If the breed is empty,
then all the dogs will be considered. The same options (a, b and c) apply in this case.
  e. See the adoption list.
  
Other requirements:
  -> Replace your DynamicVector template with the STL vector. Use STL algorithms wherever possible
  in your application (e.g. in your filter function you could use copy_if, count_if). Replace all your
  for loops either with STL algorithms, or with the ranged-based for loop (C++11).
  
  -> Store your data in a text file. When the program starts, the entities in the database (file) will be
  read. The modifications made during the execution of the application should be stored in the file.
  For this feature, use the iostream library. Create insertion and extraction operators for your
  entities and use these when reading/writing to files or console.
  
  -> Use exceptions to signal errors:
    - from the repository;
    - validation errors – validate your entities using Validator classes;
    - create your own exception classes.
  Validate your input data.
  
  -> Store your adoption list in a file. When the application starts, the user should choose the type of file (CSV or HTML).
Depending on this type, the application should save the list in the correct format. 

  -> Add a new command, allowing the user to see the adoption list.
  Displaying the list means opening the saved file (csv or html) with the correct application:
    - CSV file – with Notepad, Notepad++, Microsoft Excel or OpenOffice Calc
    - HTML file – with a browser
    
  -> Create a UML diagram for your entire application. For this, you can use any tool that you like
  (StarUML is an example of open source software for UML). Do not draw the diagram by hand.
  
  -> Create a graphical user interface (GUI) for the application, using Qt.

  -> Add a multiple undo and redo functionality for the operations “add”, “remove”, “update” in
  your repository. Implement this functionality using inheritance and polymorphism. You will
  have a “Undo” and “Redo” buttons on your GUI, as well as a key combination to undo and
  redo the operations (e.g. Ctrl+Z, Ctrl+Y).
  
  -> Create a new window which presents the contents of your adoption list.
  This window will contain a list view/table view with all the elements in your list. You must use Qt
  View/Model components (QTableView). Create your own model – a class which inherits from
  QAbstractListModel or QAbstractTableModel.






  
